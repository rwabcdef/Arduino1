/*
npm init -y
npm install serialport
npm install --save-dev typescript @types/node
npx tsc --init
npm install --save-dev ts-node

npx tsc
node dist/index.js

npm run quick-start
*/

import { SerialPort } from "serialport";
import { ReadlineParser } from "@serialport/parser-readline";
import * as readline from "readline";


// Adjust this to match your device
const portName = "COM3"; // or "/dev/ttyUSB0" on Linux/macOS
const baudRate = 19200;

// Create a port instance
const port = new SerialPort({
  path: portName,
  baudRate: baudRate,
});

// Create a parser to read lines ending with '\n'
const parser = port.pipe(new ReadlineParser({ delimiter: "\n" }));

// When the port opens successfully
port.on("open", () => {
  console.log(`✅ Serial port ${portName} opened at ${baudRate} baud.`);
  
  // Send data (optional)
  // port.write("Hello device!\n", (err) => {
  //   if (err) console.error("Write error:", err.message);
  // });
});

// Listen for incoming data
parser.on("data", (line: string) => {
  console.log("📥 Received:", line);
});

// Handle errors
port.on("error", (err) => {
  console.error("❌ Serial port error:", err.message);
});

// --- Keyboard input setup ---
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  prompt: "> ",
});

rl.prompt();

// When the user types a line and presses Enter
rl.on("line", (input) => {
  const message = input.trim() + "\n"; // append newline
  port.write(message, (err) => {
    if (err) {
      console.error("⚠️ Write error:", err.message);
    } else {
      console.log(`📤 Sent: ${input}`);
    }
  });
  rl.prompt();
});

// Gracefully handle Ctrl+C
rl.on("SIGINT", () => {
  console.log("\n👋 Closing serial port...");
  port.close();
  rl.close();
  process.exit(0);
});